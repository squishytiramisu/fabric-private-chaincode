/'
    Copyright 2020 Intel Corporation
    Copyright IBM Corp. All Rights Reserved.

    SPDX-License-Identifier: Apache-2.0
'/

@startuml

'- force wrapping of longer text
'skinparam wrapWidth 400

!pragma teoz true

hide footbox
title Foot Box removed

title Fabric Private Chaincode - Transaction validation using custom VSCC

actor "User Org1" as User1 order 9

participant "Peer Org1" as ECC1 order 30
participant "Peer Org2" as ECC2 order 60
participant "Peer Org3" as ECC3 order 70

entity Orderer order 100

ref over ECC1, ECC2, ECC3
    install, approve, commit chaincode definition
end ref

ref over ECC1, ECC2, ECC3
    register enclaves and key-dist
end ref

group chaincode execution

    activate User1

    User1 -> ECC1 ++: send proposal
    ref over ECC1
        invoke chaincode enclave
    end ref
    return proposal response

    User1 -> ECC2 ++: send proposal
    ref over ECC2
        invoke chaincode enclave
    end ref
    return

    User1 -> User1 : form transaction

    User1 -> Orderer++ : send transaction
    deactivate User1

    group collect transactions
        ...
        Orderer -> Orderer : form block
    end group

    Orderer -> ECC1+ : broadcast
    & Orderer -> ECC2+ : broadcast
    & Orderer -> ECC3+ : broadcast
    deactivate Orderer

    group validation & commit
        ECC1 -> ECC1 : validate block signature
        loop for each tx in block
            ECC1 -> ECC1 : validate tx (client) signature

            ECC1 -> ECC1 : validate endorsements policy

            opt if enclave transaction
                ECC1 -> ECC1 ++ : check enclave (endorsement) signatures
                create "ERCC Peer Org1" as ERCC1 order 33
                ECC1 -> ERCC1 ++ : check enclaves are registered
                return
                deactivate ECC1
                |||
            end

            ECC1 -> ECC1 : read-write check

            ECC1 -> ECC1 : mark tx as valid/invalid
        end loop

        loop for each tx in block
           ECC1 -> ECC1 : apply valid tx writeset
        end loop

        ECC1 -> ECC1 : append block to ledger

        create "TLCC Peer Org1" as TLCC1 order 31 #99FF99

        ECC1 -> TLCC1 ++ : new block
        deactivate ECC1
        |||
        ref over TLCC1
            validation & commit
        end ref
        |||
        deactivate TLCC1
        |||

    end group
    |||



    ref over ECC2
        validation & commit
    end ref
    |||
    deactivate ECC2

    ref over ECC3
        validation & commit
    end ref
    |||
    deactivate ECC3

    |||

end group

@enduml
