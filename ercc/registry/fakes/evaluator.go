// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type IdentityEvaluator struct {
	EvaluateCreatorIdentityStub        func([]byte, string) error
	evaluateCreatorIdentityMutex       sync.RWMutex
	evaluateCreatorIdentityArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	evaluateCreatorIdentityReturns struct {
		result1 error
	}
	evaluateCreatorIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IdentityEvaluator) EvaluateCreatorIdentity(arg1 []byte, arg2 string) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.evaluateCreatorIdentityMutex.Lock()
	ret, specificReturn := fake.evaluateCreatorIdentityReturnsOnCall[len(fake.evaluateCreatorIdentityArgsForCall)]
	fake.evaluateCreatorIdentityArgsForCall = append(fake.evaluateCreatorIdentityArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.EvaluateCreatorIdentityStub
	fakeReturns := fake.evaluateCreatorIdentityReturns
	fake.recordInvocation("EvaluateCreatorIdentity", []interface{}{arg1Copy, arg2})
	fake.evaluateCreatorIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityEvaluator) EvaluateCreatorIdentityCallCount() int {
	fake.evaluateCreatorIdentityMutex.RLock()
	defer fake.evaluateCreatorIdentityMutex.RUnlock()
	return len(fake.evaluateCreatorIdentityArgsForCall)
}

func (fake *IdentityEvaluator) EvaluateCreatorIdentityCalls(stub func([]byte, string) error) {
	fake.evaluateCreatorIdentityMutex.Lock()
	defer fake.evaluateCreatorIdentityMutex.Unlock()
	fake.EvaluateCreatorIdentityStub = stub
}

func (fake *IdentityEvaluator) EvaluateCreatorIdentityArgsForCall(i int) ([]byte, string) {
	fake.evaluateCreatorIdentityMutex.RLock()
	defer fake.evaluateCreatorIdentityMutex.RUnlock()
	argsForCall := fake.evaluateCreatorIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *IdentityEvaluator) EvaluateCreatorIdentityReturns(result1 error) {
	fake.evaluateCreatorIdentityMutex.Lock()
	defer fake.evaluateCreatorIdentityMutex.Unlock()
	fake.EvaluateCreatorIdentityStub = nil
	fake.evaluateCreatorIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdentityEvaluator) EvaluateCreatorIdentityReturnsOnCall(i int, result1 error) {
	fake.evaluateCreatorIdentityMutex.Lock()
	defer fake.evaluateCreatorIdentityMutex.Unlock()
	fake.EvaluateCreatorIdentityStub = nil
	if fake.evaluateCreatorIdentityReturnsOnCall == nil {
		fake.evaluateCreatorIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.evaluateCreatorIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdentityEvaluator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateCreatorIdentityMutex.RLock()
	defer fake.evaluateCreatorIdentityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IdentityEvaluator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
